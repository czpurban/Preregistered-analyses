if (!require("pacman")) install.packages("pacman")
pacman::p_load(car, lme4, dplyr)

prob.positive<-0.05
PropSingRes<-numeric(length(threshold))
N<- 201 #sample size


# Simulation: no effect of items on DV -------------------------------------

    singular<-numeric(100)
    for (k in 1:100) {
      #simulating data
      data<-data.frame(id = rep(1:N, each=48), response =  sample(1:6, N*48, replace=T))

      i<-1
      while (i<N*48+1){
        data$item[i:(i+47)] <- c(sample(1:48, 24, replace=F),sample(49:96, 24, replace=F)) 
        i<-i+48
      }
      data$change<-as.factor(runif(length(data[,1]), 0,1)<prob.positive)
      #setting the proportion of zeros in the DV
      
      #running the model
      model1 <- glmer(change~ (1|item), 
                      data = data, family = binomial(link = "logit"), 
                      glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
      
      #checking for singularity in th eresult
      singular[k]<-isSingular(model1, tol = 1e-05)
      print(k)}

probSingular1<-mean(singular) #proportion of results with singularity

# Some effects of items on DV -------------------------------------
 
singular<-numeric(100)
  for (k in 1:100) {
    #simulating data
    data<-data.frame(id = rep(1:N, each=48), response =  sample(1:6, N*48, replace=T))
    
    i<-1
    while (i<N*48+1){
      data$item[i:(i+47)] <- c(sample(1:48, 24, replace=F),sample(49:96, 24, replace=F))
      data$manipulated[i:(i+47)]<-c(sample(c(rep(0,21),rep(1,3)), 24, replace=F),
                                    sample(c(rep(0,21),rep(1,3)), 24, replace=F))
      data$trial[i:(i+47)] <- sample(c(1:48),48,replace=F) 
      i<-i+48
    }
    data$score<-data$item/960 # prob. of change max. 0.1
    for (m in 1:length(data[,1])) {
      data$change[m]<-rbinom(1,1,data$score[m])}
    
    #running the model
    model1 <- glmer(change~ (1|item), 
                    data = data, family = binomial(link = "logit"), 
                    glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
    
    #checking for singularity in th eresult
    singular[k]<-isSingular(model1, tol = 1e-05)
    print(k)}

probSingular2<-mean(singular) #proportion of results with singularity
